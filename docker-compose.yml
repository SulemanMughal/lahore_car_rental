version: "3.9"

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lcr}
      POSTGRES_USER: ${POSTGRES_USER:-lcr}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lcr}
    volumes:
      - dbdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"   # optional: expose for local tools
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lcr} -d ${POSTGRES_DB:-lcr}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"   # optional: expose for local tools
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes  # Enable persistence

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      # Point Django at the DB container
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432

      # Point Django at the Redis container
      CACHE_URL: redis://redis:6379/1

      # SimpleJWT keys (mounted as volumes for development)
      JWT_PRIVATE_KEY_FILE: /app/secrets/jwtRS256.key
      JWT_PUBLIC_KEY_FILE: /app/secrets/jwtRS256.key.pub

      # Optional tuning
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE:-lcr.settings.base}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-false}
      DJANGO_COLLECTSTATIC: ${DJANGO_COLLECTSTATIC:-1}
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-2}
      WEB_TIMEOUT: ${WEB_TIMEOUT:-60}
    volumes:
      - staticdata:/static           # STATIC_ROOT
      - mediadata:/app/media         # MEDIA_ROOT (adjust if different)
      - ./secrets:/app/secrets:ro    # JWT keys for development
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  dbdata:
  redisdata:
  staticdata:
  mediadata:
